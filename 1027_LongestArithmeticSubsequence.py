from collections import defaultdict

class Solution:

    # Solution #1 brute force
    def longestArithSeqLength(self, nums: list[int]) -> int:

        N = len(nums)
        ans = 0

        print(N)

        for i in range(N):
            for j in range(i+1, N):
                diff = nums[j] - nums[i]
                find = nums[j] + diff
                cnt = 2
                for k in range(j+1, N):
                    if nums[k] == find:
                        cnt += 1
                        find = nums[k] + diff
                ans = max(ans, cnt)

        return ans
    
    # Solution #2 dp array
    def longestArithSeqLength(self, nums: list[int]) -> int:

        N = len(nums)
        dp = []
        ans = 0

        for _ in range(N):
            dp.append(defaultdict(lambda:1))

        for r in range(N):
            for l in range(0, r):
                diff = nums[r] - nums[l]
                dp[r][diff] = dp[l][diff] + 1
                ans = max(ans, dp[r][diff])

        return ans
    
    # Solution #2 dp map
    def longestArithSeqLength(self, nums) -> int:

        N = len(nums)
        dp = {}
        
        for r in range(N):
            for l in range(0, r):
                dp[r, nums[r] - nums[l]] = dp.get((l, nums[r] - nums[l]), 1) + 1
        
        # print(dp.values())
        return max(dp.values())
    
    def longestArithSeqLength(self, nums) -> int:
        diff_range = max(nums) - min(nums)
        res = 2

        for abs_diff in range(diff_range + 1):
            if abs_diff * (res - 1) >= diff_range:
                break
            for diff in (-abs_diff, abs_diff):
                counter = defaultdict(lambda: 1)
                for num in nums:
                    pre = num - diff
                    if pre in counter:
                        counter[num] = max(counter[num], counter[pre]+1)
                    res = max(res, counter[num])

        return res







# print(Solution().longestArithSeqLength([3,6,9,12]))
print(Solution().longestArithSeqLength([0,1,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,1]))